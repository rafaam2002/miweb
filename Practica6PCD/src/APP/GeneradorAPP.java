/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package APP;

import static java.lang.Thread.sleep;
import java.util.Random;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import practica6pcd.Camarero;
import practica6pcd.Cortado;
import practica6pcd.Generador;
import practica6pcd.Manchado;
import proyecto1.CanvasCongreso;

/**
 *
 * @author rafaa
 */
public class GeneradorAPP extends java.awt.Frame {

    /**
     * Creates new form GeneradorAPP
     */
    public GeneradorAPP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        var gen = new GeneradorAPP();
        gen.setSize(800, 700);
        var cv = new CanvasCongreso(800, 700);
        gen.add(cv);
        gen.setVisible(true);

        Random rdm = new Random();
        Semaphore salaCafe = new Semaphore(3);
        Semaphore salaLeche = new Semaphore(3);
        Semaphore cafe = new Semaphore(10);
        Semaphore leche = new Semaphore(10);
        Semaphore papelera = new Semaphore(1);

        var camarero = new Camarero(cafe, leche);
        Thread[] asistentes = new Thread[30];

        camarero.start();

        //creacion de hilos
        for (int i = 0; i < 30; i++) {
            if (rdm.nextInt(100) < 50) {
                asistentes[i] = new Cortado(salaCafe, salaLeche, cafe, leche, papelera, "Cortado-" + i, cv);
            } else {
                asistentes[i] = new Thread(new Manchado(salaCafe, salaLeche, cafe, leche, papelera, "Manchado-" + i, cv));
            }
            asistentes[i].start();
            try {
                sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //espera de hilos
        for (int i = 0; i < 30; i++) {
            try {
                asistentes[i].join();
            } catch (InterruptedException ex) {
                Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //finalizo camarero
        System.out.println("Mato a camarero");
        camarero.interrupt(); // le lanza una interrupcion de tipo interrupt a camarero, ahi hacemos un brake para salir del bucle
        try {
            camarero.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
        }
        Thread.sleep(2000);
        System.exit(0);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
